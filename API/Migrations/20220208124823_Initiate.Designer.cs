// <auto-generated />
using System;
using Diorama.Internals.Persistent;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Diorama.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20220208124823_Initiate")]
    partial class Initiate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ID")
                        .HasName("pk_category");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_category_name");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("PostID")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ID")
                        .HasName("pk_comment");

                    b.HasIndex("AuthorID")
                        .HasDatabaseName("ix_comment_author_id");

                    b.HasIndex("PostID")
                        .HasDatabaseName("ix_comment_post_id");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Follower", b =>
                {
                    b.Property<int>("FollowSubjectID")
                        .HasColumnType("integer")
                        .HasColumnName("follow_subject_id");

                    b.Property<int>("FollowObjectID")
                        .HasColumnType("integer")
                        .HasColumnName("follow_object_id");

                    b.HasKey("FollowSubjectID", "FollowObjectID")
                        .HasName("pk_follower");

                    b.HasIndex(new[] { "FollowObjectID", "FollowSubjectID" }, "ix_followings")
                        .HasDatabaseName("ix_follower_follow_object_id_follow_subject_id");

                    b.ToTable("follower", (string)null);
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("caption");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<int>("Likes")
                        .HasColumnType("integer")
                        .HasColumnName("likes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ID")
                        .HasName("pk_post");

                    b.HasIndex("AuthorID")
                        .HasDatabaseName("ix_post_author_id");

                    b.HasIndex("CategoryID")
                        .HasDatabaseName("ix_post_category_id");

                    b.ToTable("post", (string)null);
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.PostCategory", b =>
                {
                    b.Property<int>("PostID")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.HasKey("PostID", "CategoryID")
                        .HasName("pk_post_category");

                    b.HasIndex("CategoryID")
                        .HasDatabaseName("ix_post_category_category_id");

                    b.ToTable("post_category", (string)null);
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.PostLike", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("PostID")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.HasKey("UserID", "PostID")
                        .HasName("pk_post_like");

                    b.HasIndex("PostID")
                        .HasDatabaseName("ix_post_like_post_id");

                    b.ToTable("post_like", (string)null);
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Report", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<int?>("CommentID")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("PostID")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ID")
                        .HasName("pk_report");

                    b.HasIndex("AuthorID")
                        .HasDatabaseName("ix_report_author_id");

                    b.HasIndex("CommentID")
                        .HasDatabaseName("ix_report_comment_id");

                    b.HasIndex("PostID")
                        .HasDatabaseName("ix_report_post_id");

                    b.ToTable("report", (string)null);
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("biography");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Followers")
                        .HasColumnType("integer")
                        .HasColumnName("followers");

                    b.Property<int>("Following")
                        .HasColumnType("integer")
                        .HasColumnName("following");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserRoleID")
                        .HasColumnType("integer")
                        .HasColumnName("user_role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("ID")
                        .HasName("pk_user");

                    b.HasIndex("UserRoleID")
                        .HasDatabaseName("ix_user_user_role_id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_user_username");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ID")
                        .HasName("pk_user_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_name");

                    b.ToTable("user_role", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "User"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Comment", b =>
                {
                    b.HasOne("Diorama.Internals.Persistent.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_user_author_id");

                    b.HasOne("Diorama.Internals.Persistent.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_comment_post_post_id");

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Follower", b =>
                {
                    b.HasOne("Diorama.Internals.Persistent.Models.User", "FollowObject")
                        .WithMany()
                        .HasForeignKey("FollowObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_follower_user_follow_object_id");

                    b.HasOne("Diorama.Internals.Persistent.Models.User", "FollowSubject")
                        .WithMany()
                        .HasForeignKey("FollowSubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_follower_user_follow_subject_id");

                    b.Navigation("FollowObject");

                    b.Navigation("FollowSubject");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Post", b =>
                {
                    b.HasOne("Diorama.Internals.Persistent.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_post_user_author_id");

                    b.HasOne("Diorama.Internals.Persistent.Models.Category", null)
                        .WithMany("Posts")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("fk_post_category_category_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.PostCategory", b =>
                {
                    b.HasOne("Diorama.Internals.Persistent.Models.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_post_category_category_category_id");

                    b.HasOne("Diorama.Internals.Persistent.Models.Post", "Post")
                        .WithMany("Categories")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_post_category_post_post_id");

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.PostLike", b =>
                {
                    b.HasOne("Diorama.Internals.Persistent.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_post_like_post_post_id");

                    b.HasOne("Diorama.Internals.Persistent.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_post_like_user_user_id");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Report", b =>
                {
                    b.HasOne("Diorama.Internals.Persistent.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_report_user_author_id");

                    b.HasOne("Diorama.Internals.Persistent.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_report_comment_comment_id");

                    b.HasOne("Diorama.Internals.Persistent.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_report_post_post_id");

                    b.Navigation("Author");

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.User", b =>
                {
                    b.HasOne("Diorama.Internals.Persistent.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_user_role_user_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Category", b =>
                {
                    b.Navigation("PostCategories");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.Post", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Diorama.Internals.Persistent.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
